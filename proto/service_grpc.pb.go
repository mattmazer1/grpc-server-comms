// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: proto/service.proto

package grpc_chat_app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatAppClient is the client API for ChatApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAppClient interface {
	CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ChatApp_CreateStreamClient, error)
	BroadcastMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
}

type chatAppClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAppClient(cc grpc.ClientConnInterface) ChatAppClient {
	return &chatAppClient{cc}
}

func (c *chatAppClient) CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ChatApp_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatApp_ServiceDesc.Streams[0], "/proto.ChatApp/CreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatAppCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatApp_CreateStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatAppCreateStreamClient struct {
	grpc.ClientStream
}

func (x *chatAppCreateStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatAppClient) BroadcastMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.ChatApp/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatAppServer is the server API for ChatApp service.
// All implementations must embed UnimplementedChatAppServer
// for forward compatibility
type ChatAppServer interface {
	CreateStream(*Connect, ChatApp_CreateStreamServer) error
	BroadcastMessage(context.Context, *Message) (*Close, error)
	mustEmbedUnimplementedChatAppServer()
}

// UnimplementedChatAppServer must be embedded to have forward compatible implementations.
type UnimplementedChatAppServer struct {
}

func (UnimplementedChatAppServer) CreateStream(*Connect, ChatApp_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedChatAppServer) BroadcastMessage(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedChatAppServer) mustEmbedUnimplementedChatAppServer() {}

// UnsafeChatAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAppServer will
// result in compilation errors.
type UnsafeChatAppServer interface {
	mustEmbedUnimplementedChatAppServer()
}

func RegisterChatAppServer(s grpc.ServiceRegistrar, srv ChatAppServer) {
	s.RegisterService(&ChatApp_ServiceDesc, srv)
}

func _ChatApp_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatAppServer).CreateStream(m, &chatAppCreateStreamServer{stream})
}

type ChatApp_CreateStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatAppCreateStreamServer struct {
	grpc.ServerStream
}

func (x *chatAppCreateStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatApp_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAppServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatApp/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAppServer).BroadcastMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatApp_ServiceDesc is the grpc.ServiceDesc for ChatApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatApp",
	HandlerType: (*ChatAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastMessage",
			Handler:    _ChatApp_BroadcastMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _ChatApp_CreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
